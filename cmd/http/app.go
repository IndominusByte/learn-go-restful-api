package main

import (
	"fmt"
	"log"
	"net/http"
	"strings"

	_ "github.com/IndominusByte/learn-go-restful-api/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/IndominusByte/learn-go-restful-api/internal/config"
	endpoint_http "github.com/IndominusByte/learn-go-restful-api/internal/endpoint/http"
	"github.com/IndominusByte/learn-go-restful-api/internal/pkg/auth"
	categoriesrepo "github.com/IndominusByte/learn-go-restful-api/internal/repo/categories"
	categoriesusecase "github.com/IndominusByte/learn-go-restful-api/internal/usecase/categories"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/jwtauth"

	"github.com/go-chi/chi/v5/middleware"
	httpSwagger "github.com/swaggo/http-swagger"
)

// FileSystem custom file system handler
type FileSystem struct {
	fs http.FileSystem
}

// Open opens file
func (fs FileSystem) Open(path string) (http.File, error) {
	f, err := fs.fs.Open(path)
	if err != nil {
		return nil, err
	}

	s, err := f.Stat()
	if err != nil {
		return nil, err
	}

	if s.IsDir() {
		return fs.fs.Open("upps!")
	}

	return f, nil
}

func startApp(cfg *config.Config) (err error) {
	defer func() {
		if r := recover(); r != nil {
			err = fmt.Errorf("%v", r)
		}
	}()

	// connect the db
	db, err := config.DBConnect(cfg)
	if err != nil {
		return err
	}
	log.Printf("DB Connected")

	// connect redis
	redisCli, err := config.RedisConnect(cfg)
	if err != nil {
		return err
	}
	log.Println("Redis connected")

	r := chi.NewRouter()
	// jwt
	// TokenAuthHS256 := jwtauth.New(cfg.JWT.Algorithm, []byte(cfg.JWT.SecretKey), nil)
	// r.Use(jwtauth.Verifier(TokenAuthHS256))
	publicKey, privateKey := auth.DecodeRSA(cfg.JWT.PublicKey, cfg.JWT.PrivateKey)
	TokenAuthRS256 := jwtauth.New(cfg.JWT.Algorithm, privateKey, publicKey)
	r.Use(jwtauth.Verifier(TokenAuthRS256))

	// middleware stack
	r.Use(middleware.RealIP)
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)

	r.Get("/swagger/*", httpSwagger.Handler(
		httpSwagger.URL("doc.json"), //The url pointing to API definition
	))
	// serve file static
	fileServer := http.FileServer(FileSystem{http.Dir("static")})
	r.Handle("/static/*", http.StripPrefix(strings.TrimRight("/static/", "/"), fileServer))

	// you can insert your behaviors here
	categoriesRepo, err := categoriesrepo.New(db)
	if err != nil {
		return err
	}
	categoriesUsecase := categoriesusecase.NewCategoriesUsecase(categoriesRepo)
	endpoint_http.AddCategories(r, categoriesUsecase, redisCli)
	// add token
	endpoint_http.AddToken(r, redisCli, cfg)

	return startServer(r, cfg)
}
